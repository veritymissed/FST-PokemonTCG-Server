{"version":3,"sources":["logo.svg","static/images/gengar.png","App.js","reportWebVitals.js","index.js"],"names":["color_purple","ponkemon_cards","data","color_white","rarities","raritiesEsModule","types","supertypesEsModule","typesEsModule","initialUserState","isLogin","currentUserEmail","favorite_cards","reducer","state","action","console","log","type","payload","updatePayload","oldState","Error","UserContext","React","createContext","setSessionStorage","session","removeSessionStorage","jsonStringOfNewSession","JSON","stringify","localStorage","setItem","removeItem","getSessionStorage","sessionCookie","getItem","parse","getCurrentUser","currentUser","getUpdateUserPromise","updatingUser","form","Promise","resolve","options","id","body","request","error","response","responseObject","FavoriteCardList","props","useContext","userState","dispatch","useState","favoriteCardList","setFavoriteCardList","navigate","useNavigate","useEffect","isUpdating","setIsUpdating","removeFrom","cardId","a","_","foundIndex","findIndex","cardInCurrentUser","splice","CardList","cards","addTo","Box","sx","display","justifyContent","flexWrap","maxWidth","mx","map","card","PokemonCard","LoginForm","isLoading","setIsLoading","formEmail","setFormEmail","formPassword","setFormPassword","formEmailValidationError","setFormEmailValidationError","formEmailValidationErrorMessage","setFormEmailValidationErrorMessage","formPasswordValidationError","setFormPasswordValidationError","formPasswordValidationErrorMessage","setFormPasswordValidationErrorMessage","loginUser","validateEmailError","validate","presence","allowEmpty","email","validatePasswordError","length","minimum","maximum","loginPromise","reject","res","statusCode","user","classes","makeStyles","theme","login_block_container","borderRadius","width","margin","padding","backgroundColor","login_block_control","marginTop","marginBottom","useStyles","className","TextField","fullWidth","required","helperText","label","onChange","e","target","value","autoComplete","Button","onClick","Loader","height","borderWidth","RegisterForm","formRepeatPassword","setFormRepeatPassword","formRepeatPasswordValidationError","setFormRepeatPasswordValidationError","formRepeatPasswordValidationErrorMessage","setFormRepeatPasswordValidationErrorMessage","registerUser","validatePasswordRepeatError","equality","registerPromise","resStatusCode","message","register_block_container","register_block_control","Logout","NavBar","currentPath","useLocation","pathname","navbar_box","color","fontSize","active_button","fontWeight","non_active_button","flexGrow","src","headerIcon","style","lineHeight","QueryBlock","isQuerying","setIsQuerying","formName","setFormDataName","formType","setFormType","formHp","setFormHp","formRarity","setFormRarity","lastTimeQueryForm","setLastTimeQueryForm","queryResult","setQueryResult","queryResultCardsArray","setQueryResultCardsArray","canLoadMore","setCanLoadMore","isLoadingMore","setIsLoadingMore","loadMoreCards","queryCardsAPI","page","count","pageSize","queryCards","name","hp","rarity","queryString","method","uri","q","err","cardObject","push","query_block_container","slider_container","marginLeft","marginRight","queryButtonText","paddingTop","paddingBottom","select_box_style_sx","minWidth","variant","FormControl","InputLabel","Select","labelId","MenuItem","Slider","min","max","valueLabelDisplay","getAriaLabel","newValue","isInFavoriteListPage","inFavoriteCards","setInFavoriteCards","styleClass","card_style","paddingLeft","paddingRight","useStyleClasses","Card","CardMedia","component","image","images","large","CardContent","Typography","gutterBottom","supertype","IconButton","loader","border","borderTop","animation","App","init","currentUserInLocalStorage","useReducer","Provider","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f75ed0f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/gengar.a8db7754.png\";","import React, { useState, useEffect, useReducer, useContext } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Box, TextField, Button, Typography, Icon } from '@mui/material';\nimport { Card, CardMedia, CardContent, CardActions } from '@mui/material';\nimport { FormControl } from '@mui/material';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport Slider from '@mui/material/Slider';\n\nimport { BrowserRouter as Router, Routes, Route, Link, useNavigate, useLocation } from 'react-router-dom';\nimport { makeStyles } from '@mui/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Cookies from 'js-cookie';\nimport * as _ from 'lodash';\nimport headerIcon from './static/images/gengar.png';\n\nimport request from 'request';\n\nimport * as raritiesEsModule from './static/rarities.json';\nimport * as supertypesEsModule from './static/supertypes.json';\nimport * as typesEsModule from './static/types.json';\nimport * as ponkemon_cards from './static/data/cards.json'\n\nimport * as validate from 'validate.js';\nlet cards = ponkemon_cards.default.data;\n\nconst color_purple = \"#5052c9\";\nconst color_white = \"#f5f6f7\";\nconst font_size = \"16px\";\nconst font_weight = \"700\";\n\nconst rarities = raritiesEsModule.default.data;\nconst supertypes = supertypesEsModule.default.data;\nconst types = typesEsModule.default.data;\n\n//LoginForm & RegisterForm\nconst MIN_PASSWORD_LENGTH = 4;\nconst MAX_PASSWORD_LENGTH = 20;\n\nconst QUERYING_API_PAGE_SIZE = 8;\n\nconst initialUserState = {\n  isLogin: false,\n  currentUserEmail: null,\n  favorite_cards: [],\n};\n\nfunction reducer(state, action) {\n  console.log('state', state);\n  console.log('action', action);\n  switch (action.type) {\n    case 'login':\n      const { isLogin, ...updatePayload } = action.payload;\n      console.log('updatePayload', updatePayload);\n      return { isLogin: true , ...updatePayload };\n    case 'update_favorite_cards':\n      const { favorite_cards, ...oldState} = state;\n      console.log('update_favorite_cards', { ...oldState, favorite_cards: action.payload.favorite_cards });\n      return { ...oldState, favorite_cards: action.payload.favorite_cards };\n    case 'logout':\n      return initialUserState;\n    default:\n      throw new Error();\n  }\n};\n\nconst UserContext = React.createContext(null);\n\nfunction setSessionStorage(session){\n  removeSessionStorage();\n  let jsonStringOfNewSession = JSON.stringify(session);\n  localStorage.setItem(\"session\", jsonStringOfNewSession)\n}\n\nfunction removeSessionStorage(){\n  localStorage.removeItem(\"session\");\n}\n\nfunction getSessionStorage(){\n  const sessionCookie = localStorage.getItem(\"session\");\n  if(sessionCookie === \"undefined\" || !sessionCookie) return {};\n  else return JSON.parse(sessionCookie);\n}\n\nfunction getCurrentUser(){\n  const {currentUser} = getSessionStorage();\n  return currentUser;\n}\n\nconst getUpdateUserPromise = function(updatingUser, form){\n  return new Promise(function(resolve) {\n    let options = {\n      'method': 'PATCH',\n      'url': `http://localhost:3000/users/${updatingUser.id}`,\n      'headers': {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(form)\n    };\n    request(options, function (error, response) {\n      if (error) throw error;\n      let responseObject = JSON.parse(response.body);\n      console.log(responseObject);\n      resolve(responseObject)\n    });\n\n  });\n}\n\nfunction App(props) {\n  let currentUserInLocalStorage = getCurrentUser();\n  let init;\n  if(currentUserInLocalStorage){\n    init = {\n      isLogin: true,\n      currentUserEmail: currentUserInLocalStorage.email,\n      favorite_cards: currentUserInLocalStorage.favorite_cards\n    };\n  }\n  else init = initialUserState;\n\n  const [userState, dispatch] = useReducer(reducer, initialUserState, () => {\n    return init\n  });\n\n  useEffect(() => {\n    let currentUserInLocalStorage = getCurrentUser();\n    if(currentUserInLocalStorage){\n      dispatch({type: 'login', payload: {currentUserEmail: currentUserInLocalStorage.email, favorite_cards: currentUserInLocalStorage.favorite_cards }});\n    }\n  },[]);\n\n\n  return (\n    <div className=\"App\">\n    <UserContext.Provider value={{userState, dispatch}}>\n    <Router>\n      <NavBar></NavBar>\n      <Routes>\n        <Route path=\"/\" element={<QueryBlock />}></Route>\n        <Route path=\"/favorite_list\" element={<FavoriteCardList/>}></Route>\n        <Route path=\"/login\" element={<LoginForm />}></Route>\n        <Route path=\"/register\" element={<RegisterForm />}></Route>\n        <Route path=\"/logout\" element={<Logout />}></Route>\n      </Routes>\n    </Router>\n    </UserContext.Provider>\n    </div>\n  );\n}\n\nfunction FavoriteCardList(props){\n  const { userState, dispatch } = useContext(UserContext);\n  console.log('userState in FavoriteCardList', userState);\n  let [favoriteCardList, setFavoriteCardList] = useState(userState.favorite_cards);\n\n  let navigate = useNavigate();\n  useEffect(() => {\n    if(!userState.isLogin) {\n      navigate('/login');\n    }\n    setFavoriteCardList(userState.favorite_cards);\n  },[userState]);\n\n\n  let [isUpdating, setIsUpdating] = useState(false);\n\n  let removeFrom = async (cardId) => {\n    console.log(`card id = ${cardId}`);\n    if(isUpdating) return\n    let currentUser = getCurrentUser();\n    if(_.isEmpty(currentUser)) return;\n\n    let foundIndex = currentUser.favorite_cards.findIndex((cardInCurrentUser) => cardInCurrentUser.id === cardId);\n    if(foundIndex < 0) return;\n    currentUser.favorite_cards.splice(foundIndex, 1);\n    setSessionStorage({currentUser})\n\n    try {\n      setIsUpdating(true);\n      await getUpdateUserPromise(currentUser, {favorite_cards: currentUser.favorite_cards || []});\n      dispatch({type: \"update_favorite_cards\", payload: {favorite_cards: currentUser.favorite_cards}});\n    } catch (e) {\n      console.log(e)\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  return (<CardList cards={favoriteCardList} removeFrom={removeFrom}></CardList>)\n}\n\nfunction CardList(props){\n  const { cards, addTo, removeFrom } = props;\n\n  return (\n    <Box sx={{display: \"fex\", justifyContent: \"flex-start\"}} flexWrap=\"wrap\" maxWidth=\"900px\" mx=\"auto\">\n    {\n      cards.map((card) => (\n        <PokemonCard card={card} addTo={addTo} removeFrom={removeFrom}></PokemonCard>\n      ))\n    }\n    </Box>\n  )\n}\n\nfunction LoginForm(){\n  const { userState, dispatch } = useContext(UserContext);\n  console.log('userState in LoginForm', userState);\n\n  const navigate = useNavigate();\n  let [isLoading, setIsLoading] = useState(false);\n\n  let [formEmail, setFormEmail] = useState(\"\");\n  let [formPassword, setFormPassword] = useState(\"\");\n\n  //For form input validation\n  let [formEmailValidationError, setFormEmailValidationError] = useState(false);\n  let [formEmailValidationErrorMessage, setFormEmailValidationErrorMessage] = useState(\"\");\n\n  let [formPasswordValidationError, setFormPasswordValidationError] = useState(false);\n  let [formPasswordValidationErrorMessage, setFormPasswordValidationErrorMessage] = useState(\"\");\n  //\n\n  useEffect(()=>{\n    console.log('userState.isLogin', userState.isLogin)\n    if(userState.isLogin) navigate(\"/\")\n  }, [navigate])\n\n  let loginUser = async () => {\n    let validateEmailError = validate.single(formEmail, {presence: {allowEmpty: false}, email: true});\n    if(validateEmailError) {\n      setFormEmailValidationError(true);\n      setFormEmailValidationErrorMessage(validateEmailError[0]);\n      return;\n    }\n\n    let validatePasswordError = validate.single(formPassword, {presence: {allowEmpty: false}, length: {minimum: MIN_PASSWORD_LENGTH, maximum\n: MAX_PASSWORD_LENGTH}});\n\n    if(validatePasswordError) {\n      setFormPasswordValidationError(true);\n      setFormPasswordValidationErrorMessage(validatePasswordError[0]);\n      return;\n    }\n\n    let loginPromise = new Promise(function(resolve, reject) {\n      let options = {\n        'method': 'POST',\n        'url': 'http://localhost:3000/auth/login',\n        'headers': {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"username\": formEmail,\n          \"password\": formPassword\n        })\n      };\n      request(options, function (error, response) {\n        if (error) throw error;\n        resolve(JSON.parse(response.body));\n      });\n\n    });\n\n    try {\n      if(isLoading) return;\n      setIsLoading(true)\n      let res = await loginPromise;\n      console.log('login res', res)\n      if(res.statusCode === 401) {\n        setFormPasswordValidationError(true);\n        setFormEmailValidationError(true);\n        setFormEmailValidationErrorMessage(\"Email or password not correct.\");\n        throw new Error(\"Login user authentication error!\");\n      }\n\n      setSessionStorage({currentUser: res.user})\n      dispatch({type: 'login', payload: { currentUserEmail: res.user.email, favorite_cards: res.user.favorite_cards }})\n      navigate('/');\n    } catch (e) {\n      console.log(e)\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  let useStyles = makeStyles((theme)=> ({\n    login_block_container:{\n      borderRadius: \"5px\",\n      width: \"400px\",\n      margin: \"40px auto 10px auto\",\n      padding: \"15px 30px 15px 30px\",\n      backgroundColor: color_white,\n    },\n    login_block_control: {\n      marginTop: \"10px\",\n      marginBottom: \"10px\",\n    }\n  }));\n  const classes = useStyles();\n  return (\n    <Box className={classes.login_block_container}>\n      <Box className={classes.login_block_control}>\n        <TextField fullWidth\n        required\n        error={formEmailValidationError}\n        helperText={formEmailValidationErrorMessage}\n        id=\"outlined-required\"\n        label=\"Email\"\n        onChange={(e) => {\n          setFormEmailValidationError(false);\n          setFormEmailValidationErrorMessage(\"\");\n          setFormEmail(e.target.value);\n        }}\n        />\n      </Box>\n      <Box className={classes.login_block_control}>\n        <TextField fullWidth\n        id=\"outlined-password-input\"\n        error={formPasswordValidationError}\n        helperText={formPasswordValidationErrorMessage}\n        label={`Password(${MIN_PASSWORD_LENGTH}-${MAX_PASSWORD_LENGTH} char)`}\n        type=\"password\"\n        autoComplete=\"current-password\"\n        onChange={(e) => {\n          setFormPasswordValidationError(false);\n          setFormPasswordValidationErrorMessage(\"\");\n          setFormPassword(e.target.value);\n        }}\n        />\n      </Box>\n\n      <Button onClick={(e) => {\n        loginUser()\n      }}>\n      Login\n      {isLoading && (<Loader width={15} height={15} borderWidth={6}></Loader>)}\n      </Button>\n    </Box>\n  )\n}\n\nfunction RegisterForm(props){\n  const { dispatch } = useContext(UserContext);\n\n  const navigate = useNavigate();\n  let [isLoading, setIsLoading] = useState(false);\n\n  let [formEmail, setFormEmail] = useState(\"\");\n  let [formPassword, setFormPassword] = useState(\"\");\n  let [formRepeatPassword, setFormRepeatPassword] = useState(\"\");\n\n  //For form input validation\n  let [formEmailValidationError, setFormEmailValidationError] = useState(false);\n  let [formEmailValidationErrorMessage, setFormEmailValidationErrorMessage] = useState(\"\");\n\n  let [formPasswordValidationError, setFormPasswordValidationError] = useState(false);\n  let [formPasswordValidationErrorMessage, setFormPasswordValidationErrorMessage] = useState(\"\");\n\n  let [formRepeatPasswordValidationError, setFormRepeatPasswordValidationError] = useState(false);\n  let [formRepeatPasswordValidationErrorMessage, setFormRepeatPasswordValidationErrorMessage] = useState(\"\");\n\n  useEffect(()=>{\n    const {currentUser} = getSessionStorage();\n    if(currentUser) navigate('/')\n  }, [navigate])\n\n  let registerUser = async () => {\n    let validateEmailError = validate.single(formEmail, {presence: {allowEmpty: false}, email: true});\n    if(validateEmailError) {\n      setFormEmailValidationError(true);\n      setFormEmailValidationErrorMessage(validateEmailError[0]);\n      return;\n    }\n\n    let validatePasswordError = validate.single(formPassword, {presence: {allowEmpty: false}, length: {minimum: MIN_PASSWORD_LENGTH, maximum\n: MAX_PASSWORD_LENGTH}});\n\n    if(validatePasswordError) {\n      setFormPasswordValidationError(true);\n      setFormPasswordValidationErrorMessage(validatePasswordError[0]);\n      return;\n    }\n\n    let validatePasswordRepeatError = validate({formPassword, formRepeatPassword}, {\n      formRepeatPassword: {\n        equality: \"formPassword\"\n      }\n    });\n    console.log('validatePasswordRepeatError', validatePasswordRepeatError)\n    if(validatePasswordRepeatError) {\n      setFormRepeatPasswordValidationError(true);\n      setFormRepeatPasswordValidationErrorMessage(validatePasswordRepeatError.formRepeatPassword[0]);\n      return;\n    }\n\n    let registerPromise = new Promise(function(resolve, reject) {\n      let options = {\n        'method': 'POST',\n        'url': 'http://localhost:3000/users/',\n        'headers': {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        form: {\n          'email': formEmail,\n          'password': formPassword\n        }\n      };\n      request(options, function (error, response) {\n        try {\n          if (error) throw error;\n          else{\n            console.log(response.statusCode);\n            resolve(response.statusCode);\n          }\n        } catch (e) {\n          throw error;\n        }\n      });\n\n    });\n\n    try {\n      if(isLoading) return;\n      setIsLoading(true)\n      let resStatusCode = await registerPromise;\n      console.log('register resStatusCode', resStatusCode)\n      if(resStatusCode !== 201) throw new Error(\"Registering error occurred !\");\n      else {\n        setSessionStorage({currentUser: {\n          email: formEmail,\n          favorite_cards: []\n        }})\n        dispatch({type: 'login', payload: { currentUserEmail: formEmail, favorite_cards: []}})\n        navigate('/');\n      }\n    } catch (e) {\n      console.log(e)\n      setFormEmailValidationError(true);\n      setFormEmailValidationErrorMessage(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  let useStyles = makeStyles((theme)=> ({\n    register_block_container:{\n      borderRadius: \"5px\",\n      width: \"400px\",\n      margin: \"40px auto 10px auto\",\n      padding: \"15px 30px 15px 30px\",\n      backgroundColor: color_white,\n    },\n    register_block_control: {\n      marginTop: \"10px\",\n      marginBottom: \"10px\",\n    }\n  }));\n  const classes = useStyles();\n\n  return(\n    <Box className={classes.register_block_container}>\n      <Box className={classes.register_block_control}>\n        <TextField fullWidth\n        required\n        error={formEmailValidationError}\n        helperText={formEmailValidationErrorMessage}\n        id=\"outlined-required\"\n        label=\"Email\"\n        onChange={(e) => {\n          setFormEmailValidationError(false);\n          setFormEmailValidationErrorMessage(\"\");\n          setFormEmail(e.target.value);\n        }}\n        />\n      </Box>\n      <Box className={classes.register_block_control}>\n        <TextField fullWidth\n        id=\"outlined-password-input\"\n        error={formPasswordValidationError}\n        helperText={formPasswordValidationErrorMessage}\n        label={`Password(${MIN_PASSWORD_LENGTH}-${MAX_PASSWORD_LENGTH} char)`}\n        type=\"password\"\n        autoComplete=\"current-password\"\n        onChange={(e) => {\n          setFormPasswordValidationError(false);\n          setFormPasswordValidationErrorMessage(\"\");\n          setFormPassword(e.target.value);\n        }}\n        />\n      </Box>\n      <Box className={classes.register_block_control}>\n        <TextField fullWidth\n        id=\"outlined-password-input\"\n        error={formRepeatPasswordValidationError}\n        helperText={formRepeatPasswordValidationErrorMessage}\n        label=\"Repeat password\"\n        type=\"password\"\n        autoComplete=\"current-password\"\n        onChange={(e) => {\n          setFormRepeatPasswordValidationError(false);\n          setFormRepeatPasswordValidationErrorMessage(\"\");\n          setFormRepeatPassword(e.target.value);\n        }}\n        />\n      </Box>\n      <Button onClick={(e) => {\n        registerUser()\n      }}>Register\n      { isLoading && (<Loader width={15} height={15} borderWidth={6}></Loader>) }\n      </Button>\n    </Box>\n  )\n}\n\nfunction Logout() {\n  const { userState, dispatch } = useContext(UserContext);\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    removeSessionStorage();\n    dispatch({ type: 'logout' });\n    navigate(\"/\");\n  },[]);\n  return (\n    <></>\n  )\n};\n\nfunction NavBar(props){\n  const { userState, dispatch } = useContext(UserContext);\n  console.log('userState in NavBar', userState);\n  let navigate = useNavigate();\n  const currentPath = useLocation().pathname;\n\n  let useStyles = makeStyles({\n    navbar_box: {\n      display: \"flex\",\n      padding: \"8px 16px 8px 16px\",\n      backgroundColor: \"rgb(36, 37, 38)\",\n      color: \"#f5f6f7\",\n      fontSize: \"16px\",\n    },\n    active_button:{\n      color: color_purple,\n      fontSize: font_size,\n      fontWeight: font_weight,\n    },\n    non_active_button: {\n      color: color_white,\n      fontSize: \"14px\",\n    },\n  });\n\n\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.navbar_box}>\n      <Box sx={{flexGrow: 1}}>\n        <Button onClick={(e)=>{\n          navigate('/')\n        }}><img height=\"30\" src={headerIcon}/>\n          <Box className={(currentPath === \"/\") ? classes.active_button : classes.non_active_button}>FST Pokémon Tcg</Box>\n        </Button>\n      </Box>\n\n      {!userState.isLogin && (\n        <Box>\n        <Button onClick={(e)=>{\n          navigate('/register')\n        }}>\n        <Box className={(currentPath === \"/register\") ? classes.active_button : classes.non_active_button}>Register</Box>\n        </Button>\n        <Button onClick={(e) => {\n          navigate('/login')\n        }}>\n        <Box className={(currentPath === \"/login\") ? classes.active_button : classes.non_active_button}>Login</Box>\n        </Button>\n        </Box>\n      )}\n      {userState.isLogin && (\n        <Box sx={{width: 350}}>\n        <Button onClick={(e) => {navigate('/favorite_list')}}>\n          <Box display=\"flex\" className={(currentPath === \"/favorite_list\") ? classes.active_button : classes.non_active_button}><Box style={{lineHeight: \"10px\", margin: \"0px 3px\"}}><FavoriteIcon></FavoriteIcon></Box></Box>\n        </Button>\n        <Button onClick={(e)=>{\n          navigate('/logout');\n        }}>\n          <Box className={classes.non_active_button}>Logout - {userState.currentUserEmail}</Box>\n        </Button>\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nfunction QueryBlock(props){\n  const { userState, dispatch } = useContext(UserContext);\n  // console.log('userState in QueryBlock', userState);\n\n  const [isQuerying, setIsQuerying] = useState(false);//is querying API state now\n  let [isUpdating, setIsUpdating] = useState(false);\n\n  const [formName, setFormDataName] = useState('');\n  const [formType, setFormType] = useState('');\n  const [formHp, setFormHp] = useState([0, 500]);\n  const [formRarity, setFormRarity] = useState('');\n\n  const [lastTimeQueryForm, setLastTimeQueryForm] = useState({});\n\n  const [queryResult, setQueryResult] = useState(null);\n  const [queryResultCardsArray, setQueryResultCardsArray] = useState([]);\n  const [canLoadMore, setCanLoadMore] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  const loadMoreCards = async () => {\n    try {\n      if(isQuerying) return;\n      else setIsQuerying(true);\n\n\n      setIsLoadingMore(true);\n      let res = await queryCardsAPI(lastTimeQueryForm, queryResult.page + 1);\n      setQueryResultCardsArray([...queryResultCardsArray, ...res.data]);\n      setQueryResult(res);\n\n      //same as in queryCards\n      if(res.data.length && res.count === res.pageSize) {\n        setCanLoadMore(true);\n        setLastTimeQueryForm(lastTimeQueryForm);\n      }\n      else setCanLoadMore(false);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsQuerying(false);\n      setIsLoadingMore(false);\n    }\n  };\n\n  const queryCards = async () => {\n    try {\n      if(isQuerying) return;\n      else setIsQuerying(true);\n\n      //Controller loader animation, load more button and remove last time querying cards\n      setQueryResultCardsArray([]);\n      setCanLoadMore(false);\n\n      let form = {\n        name: formName,\n        type: formType,\n        hp: formHp,\n        rarity: formRarity\n      };\n\n      let res = await queryCardsAPI(form);\n      setQueryResultCardsArray(res.data);\n      setQueryResult(res);\n\n      //same as in loadMoreCards\n      if(res.data.length && res.count === res.pageSize) {\n        setCanLoadMore(true);\n        setLastTimeQueryForm(form);\n      }\n      else setCanLoadMore(false);\n    } catch (e) {\n      setQueryResultCardsArray([]);\n      console.log(e);\n    } finally {\n      setIsQuerying(false);\n    }\n  };\n\n  const queryCardsAPI = async (form = {\n    name: '',\n    type: '',\n    formHp: [0,500],\n    rarity: ''\n  }, page = 1) => {\n    console.log('form.name', form.name)\n    console.log('form.type', form.type)\n    console.log('form.hp', form.hp)\n    console.log('form.rarity', form.rarity)\n    console.log('page', page)\n    let queryString = '';\n    if(form.name.length) queryString += `name:\"*${form.name}*\" `;\n    if(form.type.length) queryString += `types:${form.type} `;\n    if(form.rarity.length) queryString += `rarity:\"${form.rarity}\" `\n\n    queryString += `hp:[${form.hp[0]} TO ${form.hp[1]}] `\n\n    console.log('queryString', queryString)\n    return new Promise(function(resolve) {\n      try {\n        request({\n          method: 'GET',\n          uri: `https://api.pokemontcg.io/v2/cards/?q=${queryString}&pageSize=${QUERYING_API_PAGE_SIZE}&page=${page}`,\n          q: queryString,\n        }, function(err, res, body){\n          if(err) throw err\n          else resolve(JSON.parse(body))\n        });\n      } catch (e) {\n        throw e\n      }\n    })\n  };\n\n  let addTo = async (cardObject) => {\n    if(isUpdating) return\n\n    const currentUser = getCurrentUser();\n    if(_.isEmpty(currentUser)) return;\n\n    let foundIndex = currentUser.favorite_cards.findIndex((cardInCurrentUser) => cardInCurrentUser.id === cardObject.id);\n    if(foundIndex >= 0) return;\n\n    currentUser.favorite_cards.push(cardObject);\n    setSessionStorage({currentUser})\n\n    try {\n      await getUpdateUserPromise(currentUser, {favorite_cards: currentUser.favorite_cards || []});\n      dispatch({type: \"update_favorite_cards\", payload: {favorite_cards: currentUser.favorite_cards}});\n    } catch (e) {\n      console.log(e)\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  let removeFrom = async (cardId) => {\n    console.log(`card id = ${cardId}`);\n    if(isUpdating) return\n    const currentUser = getCurrentUser();\n    if(_.isEmpty(currentUser)) return;\n\n    let foundIndex = currentUser.favorite_cards.findIndex((cardInCurrentUser) => cardInCurrentUser.id === cardId);\n    if(foundIndex < 0) return;\n    currentUser.favorite_cards.splice(foundIndex, 1);\n    setSessionStorage({currentUser})\n\n    try {\n      setIsUpdating(true);\n      await getUpdateUserPromise(currentUser, {favorite_cards: currentUser.favorite_cards || []})\n      dispatch({type: \"update_favorite_cards\", payload: {favorite_cards: currentUser.favorite_cards}});\n    } catch (e) {\n      console.log(e)\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  let useStyles = makeStyles((theme)=> ({\n    query_block_container:{\n      borderRadius: \"5px\",\n      width: \"80%\",\n      margin: \"40px auto 10px auto\",\n      padding: \"15px 30px 15px 30px\",\n      backgroundColor: color_white,\n      display: \"flex\",\n    },\n    slider_container: {\n      color: \"#626263\",\n      width: \"400px\",\n      padding: \"5px 5px 5px 5px\",\n      marginLeft: \"20px\",\n      marginRight: \"20px\",\n    },\n    queryButtonText: {\n      color: color_purple,\n      fontWeight: \"500\",\n      fontSize: '16px',\n      paddingTop: \"10px\",\n      paddingBottom: \"10px\",\n    }\n  }))\n\n  const classes = useStyles();\n\n  let select_box_style_sx = {\n    minWidth: 120,\n    marginLeft: \"5px\",\n    marginRight: \"5px\",\n  }\n\n  return (\n    <Box >\n      <Box className={classes.query_block_container}>\n        <Box sx={select_box_style_sx}>\n          <TextField id=\"outlined-basic\" label=\"Name\" variant=\"outlined\" onChange={(e) => {setFormDataName(e.target.value)}} />\n        </Box>\n\n        <Box sx={select_box_style_sx}>\n        <FormControl fullWidth>\n          <InputLabel id=\"demo-simple-select-label\">Type</InputLabel>\n          <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={formType}\n          label=\"Type\"\n          onChange={(e)=>{\n            setFormType(e.target.value);\n          }}\n          >\n          <MenuItem value={''}>None</MenuItem>\n          {types.map((type) => (\n            <MenuItem value={type}>{type}</MenuItem>\n          ))}\n          </Select>\n        </FormControl>\n        </Box>\n\n        <Box sx={select_box_style_sx}>\n        <FormControl fullWidth>\n          <InputLabel id=\"demo-simple-select-label\">Rarity</InputLabel>\n          <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={formRarity}\n          label=\"Rarity\"\n          onChange={(e)=>{\n            setFormRarity(e.target.value);\n          }}\n          >\n          <MenuItem value={''}>None</MenuItem>\n          {rarities.map((rarity) => (\n            <MenuItem value={rarity}>{rarity}</MenuItem>\n          ))}\n          </Select>\n        </FormControl>\n        </Box>\n\n        <Box className={classes.slider_container}>\n        <Box>HP range</Box>\n        <Slider\n        min={0} max={500}\n        valueLabelDisplay=\"auto\"\n        getAriaLabel={() => 'HP range'}\n        value={formHp}\n        onChange={(e, newValue)=>{\n          setFormHp(newValue)\n        }}\n        valueLabelDisplay=\"auto\"\n        getAriaValueText={(e) => `${formHp}`}\n        />\n        </Box>\n\n        <Box>\n          <Button onClick={(e)=>{\n            queryCards();\n          }}><Box className={classes.queryButtonText}>Query</Box></Button>\n        </Box>\n      </Box>\n\n      { queryResultCardsArray.length > 0 && (<CardList cards={queryResultCardsArray} addTo={addTo} removeFrom={removeFrom}></CardList>)}\n      <Box display=\"flex\" justifyContent=\"center\">\n        { isQuerying && (\n          <Loader width={60} height={60} borderWidth={15}></Loader>\n        )}\n        { canLoadMore && !isLoadingMore && (\n          <Button onClick={(e)=>{\n            loadMoreCards()\n          }}>Load more</Button>\n        )}\n      </Box>\n    </Box>\n  );\n}\n\nfunction PokemonCard(props){\n  const { card,  addTo, removeFrom } = props;\n\n  const { userState, dispatch } = useContext(UserContext);\n\n  let [isInFavoriteListPage, setIsInFavoriteListPage] = useState(useLocation().pathname === '/favorite_list');\n\n  let [inFavoriteCards, setInFavoriteCards] = useState(false);\n  useEffect(() => {\n    let foundIndex = userState.favorite_cards.findIndex((cardInCurrentUser) => cardInCurrentUser.id === card.id);\n    if(foundIndex >= 0) setInFavoriteCards(true);\n    else setInFavoriteCards(false);\n  }, [userState]);\n\n\n  let [isUpdating, setIsUpdating] = useState(false);\n  let useStyleClasses = makeStyles((theme) => ({\n    card_style: {\n      marginTop: '10px',\n      marginBottom: '10px',\n      // marginLeft: 'auto',\n      // marginRight: 'auto',\n      marginLeft: '7.5px',\n      marginRight: '7.5px',\n      paddingLeft: '5px',\n      paddingRight: '5px'\n    },\n  }))\n  let styleClass = useStyleClasses();\n\n  return(\n  <Card sx={{ width: 200 }} className={styleClass.card_style}>\n    <CardMedia\n      component=\"img\"\n      image={card.images.large}\n    />\n    <CardContent>\n      <Typography variant=\"h5\" gutterBottom component=\"div\">{card.name || 'Name not exist'}</Typography>\n      <Typography variant=\"subtitle2\" gutterBottom component=\"div\">\n        Supertype: {card.supertype|| 'No data'}\n      </Typography>\n      {card.types && card.types.length > 0 && (\n       <Typography variant=\"subtitle2\" gutterBottom component=\"div\">\n          Type: {card.types|| 'No data'}\n        </Typography>\n      )}\n      <Typography variant=\"subtitle2\" gutterBottom component=\"div\">\n        HP: {card.hp || 'No data'}\n      </Typography>\n      <Typography variant=\"subtitle2\" gutterBottom component=\"div\">\n        Rarity: {card.rarity|| 'No data'}\n      </Typography>\n      {userState.isLogin && !isInFavoriteListPage && (\n        <Box display=\"flex\" justifyContent=\"flex-end\">\n          {inFavoriteCards && (\n            <IconButton color=\"primary\" onClick={(e)=>{\n              removeFrom(card.id);\n            }}>\n            <FavoriteIcon></FavoriteIcon>\n            </IconButton>\n          )}\n          {!inFavoriteCards && (\n            <IconButton color=\"primary\" onClick={(e)=>{\n              addTo(card);\n            }}>\n            <FavoriteBorderIcon></FavoriteBorderIcon>\n            </IconButton>\n          )}\n        </Box>\n      )}\n      {userState.isLogin && isInFavoriteListPage && (\n        <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"flex-end\">\n        <Button onClick={(e) => {\n          removeFrom(card.id);\n        }} color=\"info\">\n        <DeleteIcon></DeleteIcon>\n        </Button>\n        </Box>\n      )}\n    </CardContent>\n  </Card>)\n}\n\nfunction Loader(props){\n  const { width, height, borderWidth } = props;\n  let useStyles = makeStyles({\n    loader: {\n      border: `${borderWidth || 15}px solid #f3f3f3`,\n      borderTop: `${borderWidth || 15}px solid #555555`,\n      borderRadius: \"50%\",\n      width: `${width || 60}px`,\n      height: `${height || 60}px`,\n      animation: \"App-logo-spin 2s linear infinite\",\n    }\n  })\n  let classes = useStyles();\n  return (\n    <div className={classes.loader}></div>\n  )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}